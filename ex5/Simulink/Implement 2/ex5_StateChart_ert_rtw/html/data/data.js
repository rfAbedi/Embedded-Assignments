var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"ex5_StateChart","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"ex5_StateChart.h\"            /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(ex5_StateChart_M, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  ex5_StateChart_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  ex5_StateChart_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(ex5_StateChart_M) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* Terminate model */\r\n  ex5_StateChart_terminate();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ex5_StateChart.c","type":"source","group":"model","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: ex5_StateChart.c\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"ex5_StateChart.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"ex5_StateChart_private.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include <math.h>\r\n#include <float.h>\r\n\r\n/* Named constants for Chart: '<Root>/ControllerChart' */\r\n#define ex5_StateCha_IN_Check_Direction ((uint8_T)1U)\r\n#define ex5_StateChart_DC_MAX_SPEED    (255.0)\r\n#define ex5_StateChart_IN_Check_Mode   ((uint8_T)2U)\r\n#define ex5_StateChart_IN_Pulse_Down   ((uint8_T)3U)\r\n#define ex5_StateChart_IN_Pulse_High   ((uint8_T)4U)\r\n#define ex5_StateChart_JUMP            (25.0)\r\n#define ex5_StateChart_SENSOR_PERIOD   (1.0E+6)\r\n#define ex5_StateChart_SERVO_MAX_PW    (2000.0)\r\n#define ex5_StateChart_SERVO_MIN_PW    (1000.0)\r\n#define ex5_StateChart_SERVO_PERIOD    (20000.0)\r\n#define ex5_StateChart_SWITCH_PERIOD   (100000.0)\r\n\r\n/* Block states (default storage) */\r\nDW_ex5_StateChart_T ex5_StateChart_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_ex5_StateChart_T ex5_StateChart_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_ex5_StateChart_T ex5_StateChart_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_ex5_StateChart_T ex5_StateChart_M_;\r\nRT_MODEL_ex5_StateChart_T *const ex5_StateChart_M = &ex5_StateChart_M_;\r\nreal_T rt_remd_snf(real_T u0, real_T u1)\r\n{\r\n  real_T q;\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u1)) {\r\n    y = u0;\r\n  } else {\r\n    if (u1 < 0.0) {\r\n      q = ceil(u1);\r\n    } else {\r\n      q = floor(u1);\r\n    }\r\n\r\n    if ((u1 != 0.0) && (u1 != q)) {\r\n      q = fabs(u0 / u1);\r\n      if (!(fabs(q - floor(q + 0.5)) > DBL_EPSILON * q)) {\r\n        y = 0.0 * u0;\r\n      } else {\r\n        y = fmod(u0, u1);\r\n      }\r\n    } else {\r\n      y = fmod(u0, u1);\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid ex5_StateChart_step(void)\r\n{\r\n  real_T tmp;\r\n  real_T tmp_0;\r\n\r\n  /* Chart: '<Root>/ControllerChart' incorporates:\r\n   *  Inport: '<Root>/Inport1'\r\n   *  Inport: '<Root>/Inport2'\r\n   */\r\n  if (ex5_StateChart_DW.is_active_c3_ex5_StateChart == 0U) {\r\n    ex5_StateChart_DW.is_active_c3_ex5_StateChart = 1U;\r\n\r\n    /* Outport: '<Root>/Output' */\r\n    ex5_StateChart_Y.Output = 1.0;\r\n    ex5_StateChart_DW.is_Servo_Motor = ex5_StateChart_IN_Pulse_High;\r\n  } else {\r\n    if (rt_remd_snf(ex5_StateChart_U.Inport2, ex5_StateChart_SENSOR_PERIOD) ==\r\n        0.0) {\r\n      /* Outport: '<Root>/Output1' incorporates:\r\n       *  Constant: '<S1>/Constant'\r\n       *  Gain: '<S1>/Gain'\r\n       *  Inport: '<Root>/Inport'\r\n       *  Sum: '<S1>/Sum'\r\n       *  Sum: '<S1>/Sum1'\r\n       */\r\n      ex5_StateChart_Y.Output1 = (((ex5_StateChart_U.Inport - 20.0) *\r\n        0.48816568047337278 - 40.0) - 20.0) * ex5_StateChart_DC_MAX_SPEED /\r\n        (ex5_StateChart_DW.DC_MAX_RPM / 60.0);\r\n    }\r\n\r\n    if (rt_remd_snf(ex5_StateChart_U.Inport2, ex5_StateChart_SWITCH_PERIOD) ==\r\n        0.0) {\r\n      ex5_StateChart_DW.fast_mode = ex5_StateChart_U.Inport1;\r\n    }\r\n\r\n    switch (ex5_StateChart_DW.is_Servo_Motor) {\r\n     case ex5_StateCha_IN_Check_Direction:\r\n      if (ex5_StateChart_DW.servo_pw >= ex5_StateChart_SERVO_MAX_PW) {\r\n        ex5_StateChart_DW.servo_dir = -1.0;\r\n      } else if (ex5_StateChart_DW.servo_pw <= ex5_StateChart_SERVO_MIN_PW) {\r\n        ex5_StateChart_DW.servo_dir = 1.0;\r\n      }\r\n\r\n      ex5_StateChart_DW.is_Servo_Motor = ex5_StateChart_IN_Pulse_High;\r\n      break;\r\n\r\n     case ex5_StateChart_IN_Check_Mode:\r\n      if (ex5_StateChart_DW.fast_mode == 1.0) {\r\n        ex5_StateChart_DW.servo_pw += ex5_StateChart_JUMP *\r\n          ex5_StateChart_DW.servo_dir * 2.0 * ex5_StateChart_SERVO_MIN_PW /\r\n          500.0;\r\n        ex5_StateChart_DW.is_Servo_Motor = ex5_StateCha_IN_Check_Direction;\r\n      } else if (ex5_StateChart_DW.fast_mode == 1.0) {\r\n        ex5_StateChart_DW.servo_pw += ex5_StateChart_JUMP *\r\n          ex5_StateChart_DW.servo_dir * 2.0 * ex5_StateChart_SERVO_MIN_PW /\r\n          250.0;\r\n        ex5_StateChart_DW.is_Servo_Motor = ex5_StateCha_IN_Check_Direction;\r\n      }\r\n      break;\r\n\r\n     case ex5_StateChart_IN_Pulse_Down:\r\n      tmp = rt_remd_snf(ex5_StateChart_U.Inport2, ex5_StateChart_SERVO_PERIOD);\r\n      tmp_0 = rt_remd_snf(ex5_StateChart_U.Inport2, 500000.0);\r\n      if ((tmp == 0.0) && (tmp_0 == 0.0)) {\r\n        /* Outport: '<Root>/Output' */\r\n        ex5_StateChart_Y.Output = 1.0;\r\n        ex5_StateChart_DW.is_Servo_Motor = ex5_StateChart_IN_Check_Mode;\r\n      } else if ((tmp == 0.0) && (tmp_0 != 0.0)) {\r\n        /* Outport: '<Root>/Output' */\r\n        ex5_StateChart_Y.Output = 1.0;\r\n        ex5_StateChart_DW.is_Servo_Motor = ex5_StateChart_IN_Pulse_High;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* case IN_Pulse_High: */\r\n      if (rt_remd_snf(ex5_StateChart_U.Inport2, ex5_StateChart_DW.servo_pw) ==\r\n          0.0) {\r\n        /* Outport: '<Root>/Output' */\r\n        ex5_StateChart_Y.Output = 0.0;\r\n        ex5_StateChart_DW.is_Servo_Motor = ex5_StateChart_IN_Pulse_Down;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<Root>/ControllerChart' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid ex5_StateChart_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* SystemInitialize for Chart: '<Root>/ControllerChart' */\r\n  ex5_StateChart_DW.servo_pw = 1000.0;\r\n  ex5_StateChart_DW.servo_dir = 1.0;\r\n  ex5_StateChart_DW.DC_MAX_RPM = 16530.0;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid ex5_StateChart_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ex5_StateChart.h","type":"header","group":"model","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: ex5_StateChart.h\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef ex5_StateChart_h_\r\n#define ex5_StateChart_h_\r\n#ifndef ex5_StateChart_COMMON_INCLUDES_\r\n#define ex5_StateChart_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* ex5_StateChart_COMMON_INCLUDES_ */\r\n\r\n#include \"ex5_StateChart_types.h\"\r\n#include \"rtGetNaN.h\"\r\n#include \"rt_nonfinite.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T fast_mode;                    /* '<Root>/ControllerChart' */\r\n  real_T servo_pw;                     /* '<Root>/ControllerChart' */\r\n  real_T servo_dir;                    /* '<Root>/ControllerChart' */\r\n  real_T DC_MAX_RPM;                   /* '<Root>/ControllerChart' */\r\n  uint8_T is_active_c3_ex5_StateChart; /* '<Root>/ControllerChart' */\r\n  uint8_T is_Servo_Motor;              /* '<Root>/ControllerChart' */\r\n} DW_ex5_StateChart_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T Inport;                       /* '<Root>/Inport' */\r\n  real_T Inport1;                      /* '<Root>/Inport1' */\r\n  real_T Inport2;                      /* '<Root>/Inport2' */\r\n} ExtU_ex5_StateChart_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T Output;                       /* '<Root>/Output' */\r\n  real_T Output1;                      /* '<Root>/Output1' */\r\n} ExtY_ex5_StateChart_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_ex5_StateChart_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block states (default storage) */\r\nextern DW_ex5_StateChart_T ex5_StateChart_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_ex5_StateChart_T ex5_StateChart_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_ex5_StateChart_T ex5_StateChart_Y;\r\n\r\n/* Model entry point functions */\r\nextern void ex5_StateChart_initialize(void);\r\nextern void ex5_StateChart_step(void);\r\nextern void ex5_StateChart_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_ex5_StateChart_T *const ex5_StateChart_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Constant2' : Unused code path elimination\r\n * Block '<Root>/Constant3' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'ex5_StateChart'\r\n * '<S1>'   : 'ex5_StateChart/CelsiusScaler Subsystem'\r\n * '<S2>'   : 'ex5_StateChart/ControllerChart'\r\n */\r\n#endif                                 /* ex5_StateChart_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ex5_StateChart_private.h","type":"header","group":"model","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: ex5_StateChart_private.h\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef ex5_StateChart_private_h_\r\n#define ex5_StateChart_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"ex5_StateChart_types.h\"\r\n\r\nextern real_T rt_remd_snf(real_T u0, real_T u1);\r\n\r\n#endif                                 /* ex5_StateChart_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ex5_StateChart_types.h","type":"header","group":"model","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: ex5_StateChart_types.h\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef ex5_StateChart_types_h_\r\n#define ex5_StateChart_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_ex5_StateChart_T RT_MODEL_ex5_StateChart_T;\r\n\r\n#endif                                 /* ex5_StateChart_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.c","type":"source","group":"utility","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetInf.c\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetInf.h\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetInf_h_\r\n#define rtGetInf_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetInf(void);\r\nextern real32_T rtGetInfF(void);\r\nextern real_T rtGetMinusInf(void);\r\nextern real32_T rtGetMinusInfF(void);\r\n\r\n#endif                                 /* rtGetInf_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetNaN.c\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtGetNaN.h\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetNaN_h_\r\n#define rtGetNaN_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* rtGetNaN_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rt_nonfinite.c\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtGetNaN.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nvoid rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rt_nonfinite.h\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rt_nonfinite_h_\r\n#define rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern void rt_InitInfAndNaN(size_t realSize);\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\n#endif                                 /* rt_nonfinite_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\erfuu\\OneDrive\\Courses\\Embedded and Realtime Systems\\Exercises\\ex5\\ex5_StateChart_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'ex5_StateChart'.\r\n *\r\n * Model version                  : 1.20\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Fri Dec 13 17:19:18 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};